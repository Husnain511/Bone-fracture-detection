# -*- coding: utf-8 -*-
"""Bonefracture

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NZbrrsaekJA-gp5tssfvyLrVJgqzXgvt
"""

import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow.keras import layers, models
from sklearn.metrics import confusion_matrix, classification_report
import numpy as np
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from google.colab import files
from IPython.display import display
from ipywidgets import FileUpload, Output, Button
import os
from PIL import Image

train_dir = '/content/drive/MyDrive/Colab Notebooks/Bone Dataset/train'
validation_dir = '/content/drive/MyDrive/Colab Notebooks/Bone Dataset/val'
batch_size = 32
# Data augmentation for training dataset
train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(
    rescale=1.0/255.0,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

validation_datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1.0/255.0)
train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(224, 224),
    batch_size=batch_size,
    class_mode='binary',
    shuffle=True
)
validation_generator = validation_datagen.flow_from_directory(
    validation_dir,
    target_size=(224, 224),
    batch_size=batch_size,
    class_mode='binary',
    shuffle=False
)

sample_images, sample_labels = next(train_generator)
for i in range(4):
    plt.imshow(sample_images[i])
    plt.title("Fractured" if sample_labels[i] == 1 else "Unfractured")
    plt.axis('off')
    plt.show()

model = models.Sequential()

model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(128, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))

model.add(layers.Flatten())
model.add(layers.Dense(128, activation='relu'))
model.add(layers.Dense(1, activation='sigmoid'))  # Binary classification, so using sigmoid activation

model.compile(optimizer='adam',
              loss='binary_crossentropy',  # Binary cross-entropy for binary classification
              metrics=['accuracy'])

model.summary()

num_train_steps = len(train_generator)
num_val_steps = len(validation_generator)
num_epochs = 10

history = model.fit(
    train_generator,
    steps_per_epoch=num_train_steps,
    epochs=num_epochs,
    validation_data=validation_generator,
    validation_steps=num_val_steps
)

model.save('/content/drive/MyDrive/Colab Notebooks/Bone Detection Model/bone_detection_model.h5')

train_loss, train_accuracy = model.evaluate(train_generator)
val_loss, val_accuracy = model.evaluate(validation_generator)

print("Training Accuracy:", train_accuracy)
print("Validation Accuracy:", val_accuracy)

validation_predictions = model.predict(validation_generator)
threshold = 0.5
validation_predictions_binary = np.where(validation_predictions > threshold, 1, 0)
validation_true_labels = validation_generator.classes
confusion = confusion_matrix(validation_true_labels, validation_predictions_binary)
print("Confusion Matrix:")
print(confusion)
print("\nClassification Report:")
print(classification_report(validation_true_labels, validation_predictions_binary))

validation_predictions = model.predict(validation_generator))
threshold = 0.5
validation_predictions_binary = np.where(validation_predictions > threshold, 1, 0)
validation_true_labels = validation_generator.classes
accuracy = accuracy_score(validation_true_labels, validation_predictions_binary)
precision = precision_score(validation_true_labels, validation_predictions_binary)
recall = recall_score(validation_true_labels, validation_predictions_binary)
f1 = f1_score(validation_true_labels, validation_predictions_binary)

print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1-score:", f1)

uploaded = files.upload()

model = tf.keras.models.load_model('bone_detection_model.h5')
threshold = 0.5
output = Output()
image_data_generator = tf.keras.preprocessing.image.ImageDataGenerator(
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)
def classify_image(change):
    with output:
        output.clear_output()
        uploaded_file = list(file_upload.value.values())[0]
        if uploaded_file is not None:
            with open('temp_image.jpg', 'wb') as temp_file:
                temp_file.write(uploaded_file['content'])
            img = Image.open('temp_image.jpg')
            if img.mode != 'RGB':
                img = img.convert('RGB')

            img = img.resize((224, 224))
            img = np.asarray(img)
            img = img / 255.0
            augmented_images = [image_data_generator.random_transform(img) for _ in range(10)]
            predictions = model.predict(np.array(augmented_images))
            avg_prediction = np.mean(predictions)

            if avg_prediction > threshold:
                result = "Not Fractured"
            else:
                result = "Fractured"
            print(f"The uploaded image (with augmentation) is classified as: {result}")
file_upload = FileUpload(accept='image/*')
classify_button = Button(description='Classify')
classify_button.on_click(classify_image)
display(file_upload, classify_button, output)